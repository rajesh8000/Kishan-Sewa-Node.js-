{"ast":null,"code":"var _jsxFileName = \"D:\\\\fff\\\\Fyp\\\\frontend\\\\src\\\\screens\\\\OtpForm.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useState, useEffect } from \"react\";\nimport { Link, useHistory } from \"react-router-dom\";\nimport { Form, Button, Row, Col, Toast } from 'react-bootstrap';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Message from '../components/Message';\nimport Loader from '../components/Loader';\nimport FormContainer from '../components/FormContainer';\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst OtpForm = _ref => {\n  _s();\n  let {\n    location\n  } = _ref;\n  const [email, setEmail] = useState('');\n  const [message, setMessage] = useState('');\n  const setVal = e => {\n    setEmail(e.target.value);\n  };\n  const sendLink = async e => {\n    e.preventDefault();\n    const response = await fetch(\"/sendpasswordlink\", {\n      method: \"POST\",\n      headers: {\n        \"content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        email\n      })\n    });\n    const data = await response.json();\n    if (data.status === 201) {\n      setEmail(\"\");\n      setMessage(true);\n    } else {\n      Toast.error(\"Invalid User\");\n    }\n  };\n\n  // const submitHandler = (e) => {\n  //   e.preventDefault();\n  //   // TODO: Send password reset email using Nodemailer\n  // };\n  const redirect = location.search ? location.search.split('=')[1] : '/';\n  const emailRef = useRef();\n  return /*#__PURE__*/_jsxDEV(FormContainer, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Forget Password\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 13\n    }, this), message ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Password Reset Link Send Successfully in your Email\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 24\n    }, this) : \"\", /*#__PURE__*/_jsxDEV(Form, {\n      onSubmit: submitHandler,\n      children: [/*#__PURE__*/_jsxDEV(Form.Group, {\n        controlId: \"email\",\n        children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n          children: \"Email Address\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n          type: \"email\",\n          placeholder: \"Enter email\",\n          value: email,\n          ref: emailRef,\n          onChange: setVal\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        type: \"submit\",\n        variant: \"primary\",\n        onClick: sendLink,\n        children: \"Reset Password\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Row, {\n      className: \"py-3\",\n      children: /*#__PURE__*/_jsxDEV(Col, {\n        children: /*#__PURE__*/_jsxDEV(Link, {\n          to: redirect ? `/login?redirect=${redirect}` : '/login',\n          children: \"Login\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 9\n  }, this);\n};\n_s(OtpForm, \"F3jxCuKyqC6W4xP+BTtDZ0f33Yc=\");\n_c = OtpForm;\nexport default OtpForm;\nvar _c;\n$RefreshReg$(_c, \"OtpForm\");","map":{"version":3,"names":["React","useRef","useState","useEffect","Link","useHistory","Form","Button","Row","Col","Toast","useDispatch","useSelector","Message","Loader","FormContainer","axios","jsxDEV","_jsxDEV","OtpForm","_ref","_s","location","email","setEmail","message","setMessage","setVal","e","target","value","sendLink","preventDefault","response","fetch","method","headers","body","JSON","stringify","data","json","status","error","redirect","search","split","emailRef","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","submitHandler","Group","controlId","Label","Control","type","placeholder","ref","onChange","variant","onClick","className","to","_c","$RefreshReg$"],"sources":["D:/fff/Fyp/frontend/src/screens/OtpForm.js"],"sourcesContent":["import React, {useRef, useState, useEffect} from \"react\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\nimport { Form, Button, Row, Col, Toast } from 'react-bootstrap'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport Message from '../components/Message'\r\nimport Loader from '../components/Loader'\r\nimport FormContainer from '../components/FormContainer'\r\nimport axios from \"axios\";\r\n\r\nconst OtpForm = ({location}) => {\r\n    const [email, setEmail] = useState('');\r\n\r\n    const [message, setMessage] = useState('');\r\n    \r\n    const setVal = (e)=>{\r\n      setEmail(e.target.value)\r\n\r\n    }\r\n  \r\n\r\n    const sendLink = async(e)=>{\r\n\r\n      e.preventDefault();\r\n\r\n      const response = await fetch(\"/sendpasswordlink\",{\r\n\r\n        method:\"POST\",\r\n        headers:{\r\n          \"content-Type\":\"application/json\"\r\n        },\r\n        body:JSON.stringify({email})\r\n      })\r\n\r\n      const data = await response.json();\r\n      \r\n      if(data.status === 201){\r\n        setEmail(\"\");\r\n        setMessage(true)\r\n\r\n      }else{\r\n        Toast.error(\"Invalid User\")\r\n      }\r\n    }\r\n\r\n\r\n    // const submitHandler = (e) => {\r\n    //   e.preventDefault();\r\n    //   // TODO: Send password reset email using Nodemailer\r\n    // };\r\n    const redirect = location.search ? location.search.split('=')[1] : '/'\r\n  \r\n    const emailRef= useRef();\r\n   \r\n\r\n    return (\r\n        \r\n      \r\n        <FormContainer>\r\n            <h1>Forget Password</h1>\r\n\r\n            {message ? <p>Password Reset Link Send Successfully in your Email</p>: \"\"}\r\n    \r\n      <Form onSubmit={submitHandler}>\r\n        <Form.Group controlId='email'>\r\n          <Form.Label>Email Address</Form.Label>\r\n          <Form.Control\r\n            type='email'\r\n            placeholder='Enter email'\r\n            value={email}\r\n            ref={emailRef}\r\n            onChange={setVal}\r\n          ></Form.Control>\r\n        </Form.Group>\r\n  \r\n        <Button type='submit' variant='primary' onClick={sendLink}>\r\n          Reset Password\r\n        </Button>\r\n      </Form>\r\n\r\n      <Row className='py-3'>\r\n        <Col>\r\n          <Link to={redirect ? `/login?redirect=${redirect}` : '/login'}>\r\n            Login\r\n          </Link>\r\n        </Col>\r\n      </Row>\r\n\r\n      </FormContainer>\r\n    );\r\n  };\r\n  \r\n  export default OtpForm;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}